@using AuthenticationTemplate.AdminPanel.Authentication
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<MudThemeProvider @ref="_themeProvider" Theme="_theme" IsDarkMode="_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Medium" CloseButton="true" BackdropClick="false"
                   Position="DialogPosition.Center" CloseOnEscapeKey="true"/>
<MudSnackbarProvider/>

<MudLayout>

    <MudAppBar Color="Color.Primary" Elevation="12">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@ToggleDrawer"/>
        <MudButton Href="/" Variant="Variant.Text"
                   Class="ml-2" Color="Color.Inherit">
            <MudText Typo="Typo.h5">Admin Panel</MudText>
        </MudButton>
        <MudSpacer/>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle"/>
        <AuthorizeView>
            <Authorized>
                <MudMenu AnchorOrigin="Origin.BottomCenter">
                    <ActivatorContent>
                        <MudChip T="string" Icon="@Icons.Material.Filled.Person"
                                 Color="Color.Primary">@context.User.Identity?.Name</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="@(NavigateToSettings)" Icon="@Icons.Material.Filled.Settings"
                                     Label="Настройки"/>
                        <MudDivider/>
                        <MudMenuItem OnClick="@(Logout)" Icon="@Icons.Material.Filled.ExitToApp" Label="Выход"/>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Text"
                           Href="/login"
                           Class="ml-2"
                           Color="Color.Inherit">
                    Вход
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    
    <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="@_openDrawer"
                       Variant="@DrawerVariant.Mini"
                       Elevation="12"
                       ClipMode="DrawerClipMode.Always">
                <MudNavMenu Class="d-flex flex-column mt-4" Style="height: 100%;">

                    <AuthorizeView Context="usersContext" Roles="Admin">
                        <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People" Href="users">
                            Пользователи
                        </MudNavLink>
                    </AuthorizeView>
                    
                </MudNavMenu>
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-8">
            @Body
        </MudContainer>
    </MudMainContent>
    
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    private bool _isDarkMode = true;
    private MudThemeProvider _themeProvider = null!;
    private MudTheme? _theme;
    private const string ThemeKey = "preferred-theme";
    private bool _openDrawer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hasValue = await LocalStorage.ContainKeyAsync(ThemeKey);
            if (hasValue)
            {
                _isDarkMode = await LocalStorage.GetItemAsync<bool>(ThemeKey);
            }
            else
            {
                _isDarkMode = await _themeProvider.GetSystemDarkModeAsync();
            }

            await AuthStateProvider.RefreshStateAsync();
        
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _theme = new MudTheme
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void ToggleDrawer()
    {
        _openDrawer = !_openDrawer;
    }

    private async Task DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        await LocalStorage.SetItemAsync(ThemeKey, _isDarkMode);
        await InvokeAsync(StateHasChanged);
    }

    private const string Primary = "#663882";
    private const string Secondary = "#306d65";
    private const string Info = "#2374AB";
    private const string Success = "#169873";
    private const string Warning = "#df9c54";
    private const string Error = "#B9314F";

    private readonly PaletteLight _lightPalette = new()
    {
        Primary = Primary,
        Secondary = Secondary,
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
        TextPrimary = "#110e2d",
        TextSecondary = "#424242",
        Info = Info,
        Success = Success,
        Warning = Warning,
        Error = Error,
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = Primary,
        Secondary = Secondary,
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = Info,
        Success = Success,
        Warning = Warning,
        Error = Error,
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    private string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.LightMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private Task NavigateToSettings()
    {
        Navigation.NavigateTo("/settings");
        return Task.CompletedTask;
    }
    
    private async Task Logout()
    {
        await AuthStateProvider.MarkUserAsLoggedOut();
        Navigation.NavigateTo("/login", true);
    }
}