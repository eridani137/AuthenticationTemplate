@page "/settings"
@using System.Net
@using AuthenticationTemplate.AdminPanel.Components.Dialogs
@using AuthenticationTemplate.ClientCore.Interfaces
@using AuthenticationTemplate.Shared.DTOs
@using AuthenticationTemplate.Shared.Validations.Validators.User
@attribute [Authorize]
@inject IApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudContainer>
    <MudGrid Justify="Justify.Center" Class="mt-6">
        <MudItem xs="12" sm="8" md="6">
            <MudTabs Rounded="true" Elevation="0" Class="mud-width-full">
                <MudTabPanel Text="Сменить пароль">
                    <MudCard Elevation="6" Class="mt-4 pa-6 mud-width-full">
                        <MudCardContent>
                            <MudForm @ref="_form"
                                     Model="@_changePasswordRequest"
                                     Validation="@(_validator.ValidateValue)">
                                <MudTextField T="string"
                                              Label="Текущий пароль"
                                              FullWidth
                                              @bind-Value="_changePasswordRequest.CurrentPassword"
                                              InputType="InputType.Password"
                                              For="@(() => _changePasswordRequest.CurrentPassword)"
                                              Immediate="true"
                                              Margin="Margin.Normal"/>

                                <MudTextField T="string"
                                              Label="Новый пароль"
                                              FullWidth
                                              @bind-Value="_changePasswordRequest.NewPassword"
                                              InputType="InputType.Password"
                                              For="@(() => _changePasswordRequest.NewPassword)"
                                              Immediate="true"
                                              Margin="Margin.Normal"/>

                                <MudTextField T="string"
                                              Label="Подтверждение пароля"
                                              FullWidth
                                              @bind-Value="_changePasswordRequest.ConfirmNewPassword"
                                              InputType="InputType.Password"
                                              For="@(() => _changePasswordRequest.ConfirmNewPassword)"
                                              Immediate="true"
                                              Margin="Margin.Normal"/>

                                @if (!string.IsNullOrEmpty(_errorMessage))
                                {
                                    <MudAlert Severity="Severity.Error" Class="mt-3 mb-3">
                                        @_errorMessage
                                    </MudAlert>
                                }

                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           FullWidth
                                           Class="mt-3"
                                           OnClick="@ChangePassword">
                                    Изменить пароль
                                </MudButton>
                            </MudForm>
                        </MudCardContent>
                    </MudCard>
                </MudTabPanel>

                <MudTabPanel Text="Безопасность">
                    <MudCard Elevation="6" Class="mt-4 pa-6 mud-width-full">
                        <MudCardContent>

                            <MudGrid>
                                <MudItem xs="12" sm="6" Class="d-flex align-center">
                                    <MudText>
                                        Двухфакторная аутентификация
                                    </MudText>
                                </MudItem>

                                <MudItem xs="12" sm="6" Class="d-flex justify-end align-center">
                                    <MudButton FullWidth="true"
                                               Color="@(_isTwoFactorEnabled ? Color.Error : Color.Success)"
                                               Variant="Variant.Filled"
                                               OnClick="ToggleTwoFactor">
                                        @(_isTwoFactorEnabled ? "Выключить" : "Включить")
                                    </MudButton>
                                </MudItem>
                            </MudGrid>

                        </MudCardContent>
                    </MudCard>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private ChangePasswordRequest _changePasswordRequest = new("", "", "");
    private MudForm _form = null!;
    private string? _errorMessage;
    private ChangePasswordValidator _validator = new();

    private bool _isTwoFactorEnabled;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var twoFactorStatus = await Api.GetTwoFactorStatus();
            if (twoFactorStatus is not null)
            {
                _isTwoFactorEnabled = twoFactorStatus.IsEnabled;
            }
        }
    }

    private async Task ChangePassword()
    {
        _errorMessage = null;

        await _form.Validate();

        if (_form.IsValid)
        {
            var result = await Api.ChangePassword(_changePasswordRequest);

            if (result.StatusCode == HttpStatusCode.OK)
            {
                _changePasswordRequest = new ChangePasswordRequest("", "", "");
                Snackbar.Add("Пароль успешно изменен", Severity.Success);
                _validator = new ChangePasswordValidator();
                await _form.ResetAsync();
            }
            else
            {
                _errorMessage = result.Message ?? "Ошибка смены пароля";
            }
        }
    }

    private async Task ToggleTwoFactor()
    {
        if (!_isTwoFactorEnabled)
        {
            var setupDialog = await DialogService.ShowAsync<TwoFactorSetupDialog>("Настройка 2FA",
                new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true });

            var setupResult = await setupDialog.Result;

            if (setupResult is { Data: true })
            {
                _isTwoFactorEnabled = true;
                Snackbar.Add("Двухфакторная авторизация успешно включена", Severity.Success);
            }
        }
        else
        {
            var disableDialog = await DialogService.ShowAsync<TwoFactorDisableDialog>("Отключение 2FA",
                new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true });

            var disableResult = await disableDialog.Result;

            if (disableResult is { Canceled: true }) return;

            var code = disableResult?.Data?.ToString();
            if (string.IsNullOrWhiteSpace(code)) return;

            var result = await Api.DisableTwoFactorAsync(new TwoFactorCodeRequest(code));

            if (result.StatusCode == HttpStatusCode.OK)
            {
                _isTwoFactorEnabled = false;
                Snackbar.Add("Двухфакторная авторизация отключена", Severity.Info);
            }
            else
            {
                Snackbar.Add(result.Message ?? "Не удалось отключить 2FA", Severity.Error);
            }
        }
    }

}