@page "/login"
@using AuthenticationTemplate.ClientCore.Authentication
@using AuthenticationTemplate.ClientCore.Interfaces
@using AuthenticationTemplate.Shared.DTOs
@using AuthenticationTemplate.Shared.Validations.Validators.User
@inject IApiClient Auth
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@attribute [AllowAnonymous]

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center" Style="min-height: 80vh;">
    <MudPaper Elevation="12" Class="pa-8" Style="width: 500px;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-4 mb-4">Авторизация</MudText>

        <MudForm @ref="_form" Model="@_loginRequest" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <MudTextField
                @bind-Value="_loginRequest.Username"
                Label="Логин"
                Variant="Variant.Outlined"
                Margin="Margin.Normal"
                For="@(() => _loginRequest.Username)"
                Immediate="true"
                FullWidth="true"/>

            <MudTextField
                @bind-Value="_loginRequest.Password"
                Label="Пароль"
                Variant="Variant.Outlined"
                Margin="Margin.Normal"
                InputType="InputType.Password"
                For="@(() => _loginRequest.Password)"
                Immediate="true"
                FullWidth="true"/>

            @if (_twoFactorRequired)
            {
                <MudTextField
                    @bind-Value="_loginRequest.TwoFactorCode"
                    Label="Код аутентификации"
                    Variant="Variant.Outlined"
                    Margin="Margin.Normal"
                    For="@(() => _loginRequest.TwoFactorCode)"
                    Immediate="true"
                    FullWidth="true"
                    MaxLength="6"/>
            }

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3 mb-3">@_errorMessage</MudAlert>
            }

            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                FullWidth="true"
                OnClick="@Submit"
                Class="mt-4">
                Войти
            </MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    
    private readonly LoginRequest _loginRequest = new("", "", null);
    private string? _errorMessage;
    private MudForm _form = null!;
    private bool _twoFactorRequired;

    private readonly LoginValidator _validator = new();

    private async Task Submit()
    {
        _errorMessage = null;

        await _form.Validate();

        if (_form.IsValid)
        {
            var result = await Auth.Login(_loginRequest);

            if (result.AuthResponse is not null && !result.RequireTwoFactorCode)
            {
                await AuthStateProvider.MarkUserAsAuthenticated(result.AuthResponse);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else if (result.AuthResponse is null && result.RequireTwoFactorCode)
            {
                _twoFactorRequired = true;
                _errorMessage = result.ServerResponse.Message ?? "Ошибка авторизации";
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                _errorMessage = result.ServerResponse.Message ?? "Ошибка авторизации";
            }
        }
    }
    
}